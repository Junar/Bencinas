package com.junar.searchbenzine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.junar.searchbenzine.Benzine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table BENZINE.
 */
public class BenzineDao extends AbstractDao<Benzine, Long> {

    public static final String TABLENAME = "BENZINE";

    /**
     * Properties of entity Benzine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id",
                true, "_id");
        public final static Property Name = new Property(1, String.class,
                "name", false, "NAME");
        public final static Property Latitude = new Property(2, Double.class,
                "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class,
                "longitude", false, "LONGITUDE");
        public final static Property Gasolina93 = new Property(4, Double.class,
                "gasolina93", false, "GASOLINA93");
        public final static Property Gasolina95 = new Property(5, Double.class,
                "gasolina95", false, "GASOLINA95");
        public final static Property Gasolina97 = new Property(6, Double.class,
                "gasolina97", false, "GASOLINA97");
        public final static Property Diesel = new Property(7, Double.class,
                "diesel", false, "DIESEL");
        public final static Property Kerosene = new Property(8, Double.class,
                "kerosene", false, "KEROSENE");
        public final static Property Address = new Property(9, String.class,
                "address", false, "ADDRESS");
        public final static Property Schedule = new Property(10, String.class,
                "schedule", false, "SCHEDULE");
    };

    public BenzineDao(DaoConfig config) {
        super(config);
    }

    public BenzineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'BENZINE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'LATITUDE' REAL," + // 2: latitude
                "'LONGITUDE' REAL," + // 3: longitude
                "'GASOLINA93' REAL," + // 4: gasolina93
                "'GASOLINA95' REAL," + // 5: gasolina95
                "'GASOLINA97' REAL," + // 6: gasolina97
                "'DIESEL' REAL," + // 7: diesel
                "'KEROSENE' REAL," + // 8: kerosene
                "'ADDRESS' TEXT," + // 9: address
                "'SCHEDULE' TEXT);"); // 10: schedule
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
                + "'BENZINE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Benzine entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }

        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }

        Double gasolina93 = entity.getGasolina93();
        if (gasolina93 != null) {
            stmt.bindDouble(5, gasolina93);
        }

        Double gasolina95 = entity.getGasolina95();
        if (gasolina95 != null) {
            stmt.bindDouble(6, gasolina95);
        }

        Double gasolina97 = entity.getGasolina97();
        if (gasolina97 != null) {
            stmt.bindDouble(7, gasolina97);
        }

        Double diesel = entity.getDiesel();
        if (diesel != null) {
            stmt.bindDouble(8, diesel);
        }

        Double kerosene = entity.getKerosene();
        if (kerosene != null) {
            stmt.bindDouble(9, kerosene);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }

        String schedule = entity.getSchedule();
        if (schedule != null) {
            stmt.bindString(11, schedule);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Benzine readEntity(Cursor cursor, int offset) {
        Benzine entity = new Benzine(
                //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
                cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
                cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // gasolina93
                cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // gasolina95
                cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // gasolina97
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // diesel
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // kerosene
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
                cursor.isNull(offset + 10) ? null : cursor
                        .getString(offset + 10) // schedule
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Benzine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor
                .getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor
                .getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor
                .getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor
                .getDouble(offset + 3));
        entity.setGasolina93(cursor.isNull(offset + 4) ? null : cursor
                .getDouble(offset + 4));
        entity.setGasolina95(cursor.isNull(offset + 5) ? null : cursor
                .getDouble(offset + 5));
        entity.setGasolina97(cursor.isNull(offset + 6) ? null : cursor
                .getDouble(offset + 6));
        entity.setDiesel(cursor.isNull(offset + 7) ? null : cursor
                .getDouble(offset + 7));
        entity.setKerosene(cursor.isNull(offset + 8) ? null : cursor
                .getDouble(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor
                .getString(offset + 9));
        entity.setSchedule(cursor.isNull(offset + 10) ? null : cursor
                .getString(offset + 10));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Benzine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Benzine entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
